// #define FAIRY_GUI

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

#if FAIRY_GUI
using FairyGUI;

#endif


public static class GenUIComInitScript
{
    private const string ParamName = "uiCom";
    private const string LuaInstName = "inst";
    private const string LuaFuncName = "InitCom";

    private const string RootComName = "uiCom";

    #region Fairy UI

#if FAIRY_GUI
    private const string CtrlSuffix = "_Ctrl";
    private const string TransSuffix = "_Trans";

    private const string FariyUICsScriptDst = @"Assets\Scripts\UI\Gen";
    private const string FairyUILuaScriptDst = @"Assets\LuaScripts\UI\Gen";

    private static readonly List<Type> NoGen = new List<Type>
    {
        typeof(GLabel),
        typeof(GImage),
        typeof(GGraph),
        typeof(GMovieClip),
        typeof(GRichTextField),
    };

    private static readonly List<GameObject> TempGameObjects = new List<GameObject>();

    [MenuItem("Assets/生成所有Fairy GUI Lua 控件脚本", priority = 0)]
    private static void GenAllFairyGUILuaScript()
    {
        LoadAllUIPackages();
        var packages = UIPackage.GetPackages();
        foreach (var package in packages)
            WalkPackageItems(package, GenLuaScript);

        ReleaseTemp();
        AssetDatabase.Refresh();
    }

    [MenuItem("Assets/生成选中的Fairy GUI Lua 控件脚本", priority = 1)]
    private static void GenSelectedFairyGUILuaScript()
    {
        foreach (var o in Selection.objects)
        {
            var package = LoadUIPackage(o);
            if (package == null) continue;
            WalkPackageItems(package, GenLuaScript);
        }

        ReleaseTemp();
        AssetDatabase.Refresh();
    }

    [MenuItem("Assets/生成选中的Fairy GUI Cs 控件脚本", priority = 12)]
    public static void GenSelectedFairyGUICsScript()
    {
        foreach (var o in Selection.objects)
        {
            var package = LoadUIPackage(o);
            if (package == null) continue;
            WalkPackageItems(package, GenCsScript);
        }

        ReleaseTemp();
        AssetDatabase.Refresh();
    }

    private static void GenCsScript(UIPackage package, PackageItem item)
    {
        if (!item.exported || item.type != PackageItemType.Component) return;
        if (UIPackage.CreateObject(package.name, item.name) is GComponent ui)
        {
            TempGameObjects.Add(ui.displayObject.gameObject);
            ui.displayObject.gameObject.hideFlags |= HideFlags.HideInHierarchy;
            ui.gameObjectName = "UI(AutoGenerated)";
            GenCsScript(package.name, $"{package.name}_{item.name}", ui);
        }
    }

    private static void GenLuaScript(UIPackage package, PackageItem item)
    {
        if (!item.exported || item.type != PackageItemType.Component) return;
        if (UIPackage.CreateObject(package.name, item.name) is GComponent ui)
        {
            TempGameObjects.Add(ui.displayObject.gameObject);
            ui.displayObject.gameObject.hideFlags |= HideFlags.HideInHierarchy;
            ui.gameObjectName = "UI(AutoGenerated)";
            GenLuaScript(package.name, $"{package.name}_{item.name}", ui);
        }
    }

    private static void GenCsScript(string pkgName, string scriptName, GObject uiComp)
    {
        var com = uiComp.asCom;
        var classBuilder = new StringBuilder();
        var statementBuilder = new StringBuilder();
        var annotationBuilder = new StringBuilder();
        var constructorBuilder = new StringBuilder();

        annotationBuilder.Append(@"
//***************************
//该脚本自动生成
// 		<请勿修改>
//  " +
                                 $"Date:{DateTime.Now:yyyy-MM-dd HH:mm:ss}\n//****************************\n");

        classBuilder.Append($"public class {scriptName}\n" + "{\n");
        classBuilder.Append($"\tpublic GComponent {RootComName};\n");

        constructorBuilder.Append($"\n\tpublic {scriptName}(GComponent {ParamName})\n" + "\t{\n");
        var duplicate = new Dictionary<string, int>();
        foreach (var child in com.GetChildren())
        {
            var type = child.GetType();
            if (NoGen.Contains(type)) continue;
            var field = child.name;
            if (!duplicate.ContainsKey(field)) duplicate[field] = 0;
            duplicate[field]++;
            var statement = $"{ParamName}.GetChild(\"{child.name}\").as{As(type)}";
            var fieldType = type.Name;
            if (type == typeof(GComponent))
            {
                if (child.asCom.numChildren > 1)
                {
                    fieldType = $"{pkgName}_{child.name}";
                    statement = $"new {fieldType}({ParamName}.GetChild(\"{child.name}\").asCom)";
                    GenCsScript(pkgName, fieldType, child);
                }
            }

            var fieldName = $"{child.name}{(duplicate[field] > 1 ? (duplicate[field] - 1).ToString() : "")}";
            classBuilder.Append($"\tpublic {fieldType} {fieldName};\n");
            constructorBuilder.Append($"\t\tthis.{fieldName} = {statement};\n");
        }

        var controllers = com.Controllers;
        if (controllers != null)
        {
            foreach (var controller in controllers)
            {
                var fieldName = $"{controller.name}{CtrlSuffix}";
                classBuilder.Append($"\tpublic Controller {fieldName};\n");
                statementBuilder.Append(
                    $"\t\tthis.{fieldName} = {ParamName}.GetController(\"{controller.name}\");\n");
            }
        }

        var transitions = com.Transitions;
        if (transitions != null)
        {
            foreach (var transition in transitions)
            {
                var fieldName = $"{transition.name}{TransSuffix}";
                classBuilder.Append($"\tpublic Transition {fieldName};\n");
                statementBuilder.Append(
                    $"\t\tthis.{fieldName} = {ParamName}.GetTransition(\"{transition.name}\");\n");
            }
        }

        statementBuilder.Append($"\t\tthis.{RootComName} = {ParamName};\n");

        statementBuilder.Append("\t}\n");
        statementBuilder.Append("}\n");
        var builder = new StringBuilder();

        //using namespaces
        builder.Append("using FairyGUI;\n\n");

        builder.Append(annotationBuilder);
        builder.Append(classBuilder);
        builder.Append(constructorBuilder);
        builder.Append(statementBuilder);
        var path = Path.Combine(FariyUICsScriptDst, pkgName);
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        File.WriteAllText(Path.Combine(path, $"{scriptName}.cs"), builder.ToString());
    }

    private static void GenLuaScript(string pkgName, string moduleName, GObject uiComp)
    {
        var com = uiComp.asCom;
        var statementBuilder = new StringBuilder();
        var annotationBuilder = new StringBuilder();

        annotationBuilder.Append(@"--[[
***************************
该脚本自动生成
 		<请勿修改>
  " +
                                 $"Date:{DateTime.Now:yyyy-MM-dd HH:mm:ss}\n****************************\n]]\n");
        annotationBuilder.Append($"---@return {moduleName}\n");
        annotationBuilder.Append($"---@param {ParamName} FairyGUI.GComponent\n");
        annotationBuilder.Append($"local function {LuaFuncName}({ParamName})\n");
        annotationBuilder.Append($"\t---@class {moduleName}\n");
        statementBuilder.Append($"\tlocal {LuaInstName}" + " = {}\n");
        foreach (var child in com.GetChildren())
        {
            var type = child.GetType();
            if (NoGen.Contains(type)) continue;
            var typeName = type.FullName;
            var assignStatement = $"{ParamName}:GetChild(\"{child.name}\")";
            if (type == typeof(GComponent))
            {
                if (child.asCom.numChildren > 0)
            {
                var childModule = $"{pkgName}_{child.name}";
                GenLuaScript(pkgName, childModule, child);
                    typeName = childModule;
                    assignStatement = $"require '{childModule}'.{LuaFuncName}({ParamName}:GetChild(\"{child.name}\"))";
            }
            }

            annotationBuilder.Append($"\t---@field {child.name} {typeName}\n");
            statementBuilder.Append($"\t{LuaInstName}.{child.name} = {assignStatement}\n");
        }

        var controllers = com.Controllers;
        if (controllers != null)
        {
            foreach (var controller in controllers)
            {
                var fieldName = $"{controller.name}{CtrlSuffix}";
                annotationBuilder.Append($"\t---@field {fieldName} FairyGUI.Controller\n");
                statementBuilder.Append(
                    $"\t{LuaInstName}.{fieldName} = {ParamName}:GetController(\"{controller.name}\")\n");
            }
        }

        var transitions = com.Transitions;
        if (transitions != null)
        {
            foreach (var transition in transitions)
            {
                var fieldName = $"{transition.name}{TransSuffix}";
                annotationBuilder.Append($"\t---@field {fieldName} FairyGUI.Transition\n");
                statementBuilder.Append(
                    $"\t{LuaInstName}.{fieldName} = {ParamName}:GetTransition(\"{transition.name}\")\n");
            }
        }

        statementBuilder.Append($"\t{LuaInstName}.{RootComName} = {ParamName}\n");
        statementBuilder.Append($"\treturn {LuaInstName}\n");
        statementBuilder.Append("end\n");
        statementBuilder.Append("\nreturn {" + LuaFuncName + " = " + LuaFuncName + "}");

        var builder = new StringBuilder();
        builder.Append(annotationBuilder);
        builder.Append(statementBuilder);
        var path = Path.Combine(FairyUILuaScriptDst, pkgName);
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        File.WriteAllText(Path.Combine(path, $"{moduleName}.lua"), builder.ToString());
    }

    private static void WalkPackageItems(UIPackage package, Action<UIPackage, PackageItem> callback)
    {
        if (callback == null) return;
        foreach (var item in package.GetItems())
            callback(package, item);
    }

    private static void ReleaseTemp()
    {
        foreach (var tempObject in TempGameObjects)
            UnityEngine.Object.DestroyImmediate(tempObject);
        TempGameObjects.Clear();

        UIPackage.RemoveAllPackages();
        FontManager.Clear();
        NTexture.DisposeEmpty();
        UIObjectFactory.Clear();
    }

    private static void LoadAllUIPackages()
    {
        ReleaseTemp();
        var assetGUIDs = AssetDatabase.FindAssets("_fui t:textAsset");
        foreach (var assetGUID in assetGUIDs)
        {
            var assetPath = AssetDatabase.GUIDToAssetPath(assetGUID);
            var index = assetPath.LastIndexOf("_fui", StringComparison.Ordinal);
            if (index < 0) continue;
            assetPath = assetPath.Substring(0, index);
            UIPackage.AddPackage(assetPath,
                (string name, string extension, Type type, out DestroyMethod destroyMethod) =>
                {
                    destroyMethod = DestroyMethod.Unload;
                    return AssetDatabase.LoadAssetAtPath(name + extension, type);
                }
            );
        }
    }

    private static UIPackage LoadUIPackage(UnityEngine.Object o)
    {
        var assetPath = AssetDatabase.GetAssetPath(o);
        var index = assetPath.LastIndexOf("_fui", StringComparison.Ordinal);
        if (index < 0) return null;
        assetPath = assetPath.Substring(0, index);
        var package = UIPackage.AddPackage(assetPath,
            (string name, string extension, Type type, out DestroyMethod destroyMethod) =>
            {
                destroyMethod = DestroyMethod.Unload;
                return AssetDatabase.LoadAssetAtPath(name + extension, type);
            }
        );
        return package;
    }

    private static string As(Type comType)
    {
        if (comType == typeof(GComponent))
            return "Com";
        if (comType == typeof(GProgressBar))
            return "Progress";
        return comType.Name.Substring(1);
    }
#endif

    #endregion

    #region Unity UI

    private const string LuaModuleSuffix = "_Init";
    private const string UnityUICsScriptDst = @"Assets\Scripts\UI\Gen";
    private const string UnityUILuaScriptDst = @"Assets\LuaScripts\UI\Gen";

    [MenuItem("Assets/生成选中的Unity UI Lua 控件脚本", priority = 1)]
    private static void GenSelectUILuaScript()
    {
        foreach (var o in Selection.objects)
            if (o is GameObject go)
                GenLuaScript(o.name, $"{o.name}{LuaModuleSuffix}", go);

        AssetDatabase.Refresh();
    }

    [MenuItem("Assets/生成选中的Unity UI Cs 控件脚本", priority = 15)]
    private static void GenSelectedUICsScript()
    {
        foreach (var o in Selection.objects)
            if (o is GameObject go)
                GenCsScript(o.name, go);

        AssetDatabase.Refresh();
    }

    private static void GenCsScript(string scriptName, GameObject uiObj)
    {
        var classBuilder = new StringBuilder();
        var statementBuilder = new StringBuilder();
        var annotationBuilder = new StringBuilder();
        var constructorBuilder = new StringBuilder();
        annotationBuilder.Append(@"
//***************************
//该脚本自动生成
// 		<请勿修改>
//  " +
                                 $"Date:{DateTime.Now:yyyy-MM-dd HH:mm:ss}\n//****************************\n");
        classBuilder.Append($"public class {scriptName}\n" + "{\n");
        classBuilder.Append($"\tpublic Transform {RootComName};\n");
        constructorBuilder.Append($"\n\tpublic {scriptName}(Transform {ParamName})\n" + "\t{\n");
        var behaviours = uiObj.GetComponents<Behaviour>();
        if (behaviours != null)
        {
            foreach (var uiBehaviour in behaviours)
            {
                var type = uiBehaviour.GetType();
                var field = type.Name;
                var fieldType = type.Name;
                field = field.ToLower().Substring(0, 1) + field.Substring(1);
                classBuilder.Append($"\tpublic {fieldType} {field};\n");
                constructorBuilder.Append(
                    $"\t\tthis.{field} = {ParamName}.GetComponent(typeof({fieldType})) as {fieldType};\n");
            }
        }

        var cmpNameHash = new Dictionary<string, int>();
        foreach (Transform child in uiObj.transform)
        {
            var childBehaviours = child.GetComponents<Behaviour>();
            var field = child.name;
            var fieldType = "Transform";
            var statement = $"{ParamName}.Find(\"{child.name}\")";
            int fieldCount;
            var duplicate = false;
            if (childBehaviours != null)
            {
                if (childBehaviours.Length == 1)
                {
                    var behaviour = childBehaviours[0];
                    var type = behaviour.GetType();
                    fieldType = type.Name;
                    statement += $".GetComponent(typeof({type.Name})) as {type.Name}";
                }
                else if (childBehaviours.Length > 1)
                {
                    fieldType = $"{scriptName}_{child.name}";
                    cmpNameHash.TryGetValue(fieldType, out fieldCount);
                    var fieldName = fieldType;
                    if (fieldCount >= 1)
                    {
                        duplicate = true;
                        fieldName += cmpNameHash[fieldType];
                    }

                    statement = $"new {fieldName}({ParamName}.Find(\"{child.name}\"))";
                    GenCsScript(fieldName, child.gameObject);
                }
            }
            // else
            // {
            // return;
            // }

            if (!cmpNameHash.ContainsKey(fieldType))
                cmpNameHash[fieldType] = 0;
            cmpNameHash[fieldType]++;
            cmpNameHash.TryGetValue(fieldType, out fieldCount);
            if (fieldCount > 1) field += fieldCount - 1;
            field = field.ToLower().Substring(0, 1) + field.Substring(1);
            classBuilder.Append($"\tpublic {(duplicate ? fieldType + (fieldCount - 1) : fieldType)} {field};\n");
            constructorBuilder.Append($"\t\tthis.{field} = {statement};\n");
        }

        statementBuilder.Append($"\t\tthis.{RootComName} = {ParamName};\n");

        statementBuilder.Append("\t}\n");
        statementBuilder.Append("}\n");

        var builder = new StringBuilder();
        builder.Append("using UnityEngine;\n");
        builder.Append("using UnityEngine.UI;\n");

        builder.Append(annotationBuilder);
        builder.Append(classBuilder);
        builder.Append(constructorBuilder);
        builder.Append(statementBuilder);
        var path = Path.Combine(UnityUICsScriptDst);
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        File.WriteAllText(Path.Combine(path, $"{scriptName}.cs"), builder.ToString());
    }

    private static void GenLuaScript(string moduleName, string scriptName, GameObject uiObj)
    {
        var statementBuilder = new StringBuilder();
        var annotationBuilder = new StringBuilder();
        annotationBuilder.Append(@"--[[
***************************
该脚本自动生成
 		<请勿修改>
  " +
                                 $"Date:{DateTime.Now:yyyy-MM-dd HH:mm:ss}\n****************************\n]]\n");
        annotationBuilder.Append($"---@return {moduleName}\n");
        annotationBuilder.Append($"---@param {ParamName} UnityEngine.Transform\n");
        annotationBuilder.Append($"local function {LuaFuncName}({ParamName})\n");
        annotationBuilder.Append($"\t---@class {moduleName}\n");
        statementBuilder.Append($"\tlocal {LuaInstName}" + " = {}\n");
        var behaviours = uiObj.GetComponents<Behaviour>();
        if (behaviours != null)
        {
            foreach (var uiBehaviour in behaviours)
            {
                var type = uiBehaviour.GetType();
                var fieldName = type.Name;
                // fieldName = fieldName.ToLower().Substring(0, 1) + fieldName.Substring(1);
                var typeFullName = type.FullName;
                annotationBuilder.Append($"\t---@field {fieldName} {typeFullName}\n");
                statementBuilder.Append(
                    $"\t{LuaInstName}.{fieldName} = {ParamName}:GetComponent(typeof(CS.{typeFullName}))\n");
            }
        }

        var cmpNameHash = new Dictionary<string, int>();
        foreach (Transform child in uiObj.transform)
        {
            var childBehaviours = child.GetComponents<Behaviour>();
            var field = child.name;
            var fieldType = typeof(Transform).FullName;
            var fieldAnnotation = $"\t---@field {field} {fieldType}\n";
            var statement = $"{ParamName}:Find(\"{child.name}\")";
            int fieldCount;
            var duplicate = false;
            if (childBehaviours != null)
            {
                if (childBehaviours.Length == 1)
                {
                    var behaviour = childBehaviours[0];
                    var type = behaviour.GetType();
                    fieldType = type.FullName;
                    fieldAnnotation = $"\t---@field {field} {fieldType}\n";
                    statement += $":GetComponent(typeof(CS.{type.FullName}))";
                }
                else if (childBehaviours.Length > 1)
                {
                    fieldType = $"{moduleName}_{child.name}";
                    cmpNameHash.TryGetValue(fieldType, out fieldCount);
                    var fieldName = fieldType;
                    if (fieldCount >= 1) fieldName += cmpNameHash[fieldType];
                    var subModule = $"{fieldName}{LuaModuleSuffix}";
                    fieldAnnotation = $"\t---@field {field} {fieldName}\n";
                    statement = $"require '{subModule}':{LuaFuncName}({ParamName}:Find(\"{child.name}\"))";
                    GenLuaScript(fieldName, subModule, child.gameObject);
                }
            }
            // else
            // {
            // return;
            // }

            if (!cmpNameHash.ContainsKey(fieldType))
                cmpNameHash[fieldType] = 0;
            cmpNameHash[fieldType]++;
            cmpNameHash.TryGetValue(fieldType, out fieldCount);
            if (fieldCount > 1) field += fieldCount - 1;
            // fieldName = fieldName.ToLower().Substring(0, 1) + fieldName.Substring(1);
            annotationBuilder.Append(fieldAnnotation);
            statementBuilder.Append($"\t{LuaInstName}.{field} = {statement}\n");
        }

        annotationBuilder.Append($"\t---@field {RootComName} UnityEngine.Transform\n");
        statementBuilder.Append($"\t{LuaInstName}.{RootComName} = {ParamName}\n");
        statementBuilder.Append($"\treturn {LuaInstName}\n");
        statementBuilder.Append("end\n");
        statementBuilder.Append("\nreturn {" + LuaFuncName + " = " + LuaFuncName + "}");

        var builder = new StringBuilder();
        builder.Append(annotationBuilder);
        builder.Append(statementBuilder);
        var path = Path.Combine(UnityUILuaScriptDst);
        if (!Directory.Exists(path)) Directory.CreateDirectory(path);
        File.WriteAllText(Path.Combine(path, $"{scriptName}.lua"), builder.ToString());
    }

    #endregion
}